//Marco temporary code from befre

#include "simpleshell.h"

int main(int argc, char *argv[]) {
    FILE* fptr = NULL;
    char line_buf[BUFSIZ]; // lines are not expected to be greater than BUFSIZ bytes long
    char command[BUFSIZ]; // command is not expected to be greater than BUFSIZ bytes long
    int latest_exit_status = 0; // stores exit status value of last spawned command
    char *token_ptr = NULL;
    if (argc > 1) {
        // more than 1 argument implies our shell is being called through an interpreter
        if ((fptr = fopen(argv[1], "r")) == NULL) {
            fprintf(stderr, "Failed to fopen file: %s. %s \n", argv[1], strerror(errno));
            exit(1);
        }
    } else {
        // 1 or less arguments implies our shell is being called with no arguments
        if((fptr = fdopen(0, "r")) == NULL) {
            fprintf(stderr, "Failed to fdopen standard input. %s", strerror(errno));
            exit(1);
        }
    }

    for (;;) {
        if (fgets(line_buf, sizeof(line_buf), fptr) == NULL) {
            if (feof(fptr) != 0) {
                // EOF detected, exit using status value of last spawned command
                exit(latest_exit_status);
            }
            // if fgets fails, exit the program
            fprintf(stderr, "Failed to read line using fgets. %s", strerror(errno));
            exit(1);
        }

        token_ptr = strtok(line_buf, " ");

        if(strcpy(command, token_ptr) == NULL) { //first token should always be command
            return -1;
        } else {
            // if command was successfully processed, move onto the next "argument"
            token_ptr = strtok(NULL, " ");
        }

        while (token_ptr != NULL) {
            printf("Analyzing argument %s. ", token_ptr);
            if (strncmp(token_ptr, "<", 1) == 0) {
                // handle < filename redirection
                printf("<filename redirection detected \n");
            } else if (strncmp(token_ptr, ">", 1) == 0) {
                // handle >filename redirection
                printf(">filename redirection detected \n");
            } else if (strncmp(token_ptr, "2>>", 3) == 0) {
                // handle 2>filename redirection
                printf("2>>filename redirection detected \n");
            } else if (strncmp(token_ptr, ">>", 2) == 0) {
                // handle >>filename redirection
                printf(">>filename redirection detected");
            } else if (strncmp(token_ptr, "2>", 2) == 0) {
                // handle 2>>filename redirection
                printf("2>filename redirection detected");
            } else {
                // handle argument
                printf("normal argument detected\n");
            }
            token_ptr = strtok(NULL, " ");
        }
        if (strstr(command, "exit") != NULL) {
            printf("EXIT!!!!");
        }
        printf("\n Command was: %s \n", command);
        memset(line_buf, '\0', sizeof(line_buf));
        memset(command, '\0', sizeof(command));
    }

}